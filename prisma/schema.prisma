generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  EMPLOYEE
  PATIENT
}

enum EmployeeRole {
  ENFERMEIRO
  MEDICO
  ADMINISTRADOR
  ATENDENTE
}

enum UserStatus {
  ATIVO
  INATIVO
}

enum BloodType {
  O_PLUS
  O_MINUS
  A_PLUS
  A_MINUS
  B_PLUS
  B_MINUS
  AB_PLUS
  AB_MINUS
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  phone         String
  address       String
  password      String?
  profilePhoto  String?
  type          UserType
  status        UserStatus @default(ATIVO)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cpf           String?     @unique
  rg            String?
  profession    String?
  bloodType     BloodType?
  dateOfBirth   DateTime?
  employeeRole  EmployeeRole?
  hireDate      DateTime?
  workDays      String?
  coren         String?
  crm           String?
  MedicalRecord         MedicalRecord?
  consultationsAsPatient Consultation[] @relation("PatientRelation")
  consultationsAsDoctor   Consultation[] @relation("DoctorRelation")
  notifications           Notification[]
  @@map("users")
}

model MedicalRecord {
  id           String   @id @default(uuid())
  recordNumber String   @unique
  patientId    String   @unique
  patient      User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  soapNotes    SoapNote[]
  prescriptions Prescription[]
  diagnoses     Diagnosis[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model SoapNote {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chiefComplaint   String?
  additionalInfo   String?
  allergies        String?
  bloodPressureSystolic      Int?
  bloodPressureDiastolic     Int?
  respiratoryRate            Int?
  heartRate                  Int?
  headCircumference          Float?
  oxygenSaturation           Float?
  abdominalCircumference     Float?
  temperature                Float?
  glycemia                   Float?
  weight                     Float?
  height                     Float?
  bmi                        Float?
  previousProblems           String?
  additionalAssessment       String?
  requestedExams             String? 
  referral                   String?
  manualPrescription         String?
  planAdditionalInfo         String?
  reminders                  String? 
}

model Prescription {
  id               String         @id @default(uuid())
  description      String
  medicalRecordId  String
  medicalRecord    MedicalRecord  @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Diagnosis {
  id               String         @id @default(uuid())
  description      String
  medicalRecordId  String
  medicalRecord    MedicalRecord  @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Consultation {
  id          String   @id @default(uuid())
  patientId   String
  patient     User     @relation("PatientRelation", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId    String?
  doctor      User?    @relation("DoctorRelation", fields: [doctorId], references: [id], onDelete: Cascade)
  scheduledAt DateTime
  jitsiLink   String?
  canceled    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type    String
  message String
  date    DateTime @default(now())
}
